;;////////////////////////////////////////////////////////////////////////////////
;; Author: merlionfire 
;; 
;; Create Date:    10/07/2016
;; Design Name: 
;; File Name:      picocode.psm   
;; Project Name:   test_ddr_mgr 
;; Target Devices: 
;; Tool versions:  ISE14.5
;; Description: 
;;
;; Dependencies: 
;;
;; Revision: 
;; Revision 0.01 - File Created



;;============================================================================
;; Ascii table 
;;============================================================================
CONSTANT ascii_CR         , 0D    ; ascii code

CONSTANT ascii_SPACE      , 20    ; ascii code
CONSTANT ascii_EXCLAIM    , 21    ; ascii code
CONSTANT ascii_DBLQUOT    , 22    ; ascii code
CONSTANT ascii_NUMSIGN    , 23    ; ascii code
CONSTANT ascii_DOLLAR     , 24    ; ascii code
CONSTANT ascii_PERCENT    , 25    ; ascii code
CONSTANT ascii_AMP        , 26    ; ascii code
CONSTANT ascii_SINQUOT    , 27    ; ascii code
CONSTANT ascii_LPAREN     , 28    ; ascii code
CONSTANT ascii_RPAREN     , 29    ; ascii code
CONSTANT ascii_ASTERISK   , 2A    ; ascii code
CONSTANT ascii_PLUS       , 2B    ; ascii code
CONSTANT ascii_COMMA      , 2C    ; ascii code
CONSTANT ascii_MINUS      , 2D    ; ascii code
CONSTANT ascii_PERIOD     , 2E    ; ascii code
CONSTANT ascii_FWDSLASH   , 2F    ; ascii code

CONSTANT ascii_0          , 30    ; ascii code
CONSTANT ascii_1          , 31    ; ascii code
CONSTANT ascii_2          , 32    ; ascii code
CONSTANT ascii_3          , 33    ; ascii code
CONSTANT ascii_4          , 34    ; ascii code
CONSTANT ascii_5          , 35    ; ascii code
CONSTANT ascii_6          , 36    ; ascii code
CONSTANT ascii_7          , 37    ; ascii code
CONSTANT ascii_8          , 38    ; ascii code
CONSTANT ascii_9          , 39    ; ascii code
CONSTANT ascii_COLON      , 3A    ; ascii code
CONSTANT ascii_SEMI       , 3B    ; ascii code
CONSTANT ascii_LESS       , 3C    ; ascii code
CONSTANT ascii_EQUAL      , 3D    ; ascii code
CONSTANT ascii_GREATER    , 3E    ; ascii code
CONSTANT ascii_QUESTION   , 3F    ; ascii code

CONSTANT ascii_CIRCAT     , 40    ; ascii code
CONSTANT ascii_A          , 41    ; ascii code
CONSTANT ascii_B          , 42    ; ascii code
CONSTANT ascii_C          , 43    ; ascii code
CONSTANT ascii_D          , 44    ; ascii code
CONSTANT ascii_E          , 45    ; ascii code
CONSTANT ascii_F          , 46    ; ascii code
CONSTANT ascii_G          , 47    ; ascii code
CONSTANT ascii_H          , 48    ; ascii code
CONSTANT ascii_I          , 49    ; ascii code
CONSTANT ascii_J          , 4A    ; ascii code
CONSTANT ascii_K          , 4B    ; ascii code
CONSTANT ascii_L          , 4C    ; ascii code
CONSTANT ascii_M          , 4D    ; ascii code
CONSTANT ascii_N          , 4E    ; ascii code
CONSTANT ascii_O          , 4F    ; ascii code

CONSTANT ascii_P          , 50    ; ascii code
CONSTANT ascii_Q          , 51    ; ascii code
CONSTANT ascii_R          , 52    ; ascii code
CONSTANT ascii_S          , 53    ; ascii code
CONSTANT ascii_T          , 54    ; ascii code
CONSTANT ascii_U          , 55    ; ascii code
CONSTANT ascii_V          , 56    ; ascii code
CONSTANT ascii_W          , 57    ; ascii code
CONSTANT ascii_X          , 58    ; ascii code
CONSTANT ascii_Y          , 59    ; ascii code
CONSTANT ascii_Z          , 5A    ; ascii code
CONSTANT ascii_LBKT       , 5B    ; ascii code
CONSTANT ascii_BKSLASH    , 5C    ; ascii code
CONSTANT ascii_RBKT       , 5D    ; ascii code
CONSTANT ascii_CARET      , 5E    ; ascii code
CONSTANT ascii_DASH       , 5F    ; ascii code

CONSTANT ascii_TICK       , 60    ; ascii code
CONSTANT ascii_a          , 61    ; ascii code
CONSTANT ascii_b          , 62    ; ascii code
CONSTANT ascii_c          , 63    ; ascii code
CONSTANT ascii_d          , 64    ; ascii code
CONSTANT ascii_e          , 65    ; ascii code
CONSTANT ascii_f          , 66    ; ascii code
CONSTANT ascii_g          , 67    ; ascii code
CONSTANT ascii_h          , 68    ; ascii code
CONSTANT ascii_i          , 69    ; ascii code
CONSTANT ascii_j          , 6A    ; ascii code
CONSTANT ascii_k          , 6B    ; ascii code
CONSTANT ascii_l          , 6C    ; ascii code
CONSTANT ascii_m          , 6D    ; ascii code
CONSTANT ascii_n          , 6E    ; ascii code
CONSTANT ascii_o          , 6F    ; ascii code

CONSTANT ascii_p          , 70    ; ascii code
CONSTANT ascii_q          , 71    ; ascii code
CONSTANT ascii_r          , 72    ; ascii code
CONSTANT ascii_s          , 73    ; ascii code
CONSTANT ascii_t          , 74    ; ascii code
CONSTANT ascii_u          , 75    ; ascii code
CONSTANT ascii_v          , 76    ; ascii code
CONSTANT ascii_w          , 77    ; ascii code
CONSTANT ascii_x          , 78    ; ascii code
CONSTANT ascii_y          , 79    ; ascii code
CONSTANT ascii_z          , 7A    ; ascii code

;;============================================================================
;; Ports and related constants.
;;============================================================================

CONSTANT pt_disp_cs       , 00    ; port disp_cs
CONSTANT pt_cw_x_orig     , 01    ; port cw_x_orig
CONSTANT pt_cw_y_orig     , 02    ; port cw_y_orig
CONSTANT pt_cw_x_size     , 03    ; port cw_x_size
CONSTANT pt_cw_y_size     , 04    ; port cw_y_size
CONSTANT pt_cb_addr_orig_l , 05   ; port cb_addr_orig_l 
CONSTANT pt_cb_addr_orig_h , 06   ; port cb_addr_orig_h 
CONSTANT pt_char_rgl      , 07    ; port char_rgl
CONSTANT pt_graph_rgl     , 08    ; port graph_rgl
CONSTANT pt_cw_row        , 09    ; port cw_row
CONSTANT pt_cw_col        , 0a    ; port cw_col
CONSTANT pt_cb_wr_data    , 0b    ; port cb_wr_data

;;---------------- ddr2 mgr registers ----------------------
CONSTANT reg_ddr2_status_ctrl  , 10    ; port 
CONSTANT reg_ddr2_data0_7_0    , 11    ; port 
CONSTANT reg_ddr2_data0_15_8   , 12    ; port 
CONSTANT reg_ddr2_data0_23_16  , 13    ; port 
CONSTANT reg_ddr2_data0_31_24  , 14    ; port 
CONSTANT reg_ddr2_data1_7_0    , 15    ; port 
CONSTANT reg_ddr2_data1_15_8   , 16    ; port 
CONSTANT reg_ddr2_data1_23_16  , 17    ; port 
CONSTANT reg_ddr2_data1_31_24  , 18    ; port 
CONSTANT reg_ddr2_addr_7_0     , 19    ; port 
CONSTANT reg_ddr2_addr_15_8    , 1a    ; port 
CONSTANT reg_ddr2_addr_23_16   , 1b    ; port 

CONSTANT active_ddr2_write     , 01    ; set auto in 
CONSTANT pic_fg_red_green      , 00    ; set auto in 
CONSTANT pic_fg_blue_bg        , F1    ; set auto in 


;;---------------- frac unit registers ----------------------
CONSTANT REG_FRAC_CTRL_STATUS        ,  20 ; port
CONSTANT REG_FRAC_CX_7_0_ADDR        ,  21 ; port
CONSTANT REG_FRAC_CX_15_8_ADDR       ,  22 ; port
CONSTANT REG_FRAC_CX_23_16_ADDR      ,  23 ; port
CONSTANT REG_FRAC_CX_31_24_ADDR      ,  24 ; port
CONSTANT REG_FRAC_CY_7_0_ADDR        ,  25 ; port
CONSTANT REG_FRAC_CY_15_8_ADDR       ,  26 ; port
CONSTANT REG_FRAC_CY_23_16_ADDR      ,  27 ; port
CONSTANT REG_FRAC_CY_31_24_ADDR      ,  28 ; port
CONSTANT REG_FRAC_MAX_ITER_LOW_ADDR  ,  29 ; port
CONSTANT REG_FRAC_MAX_ITER_HIGH_ADDR ,  2a ; port
CONSTANT REG_FRAC_PY_7_0_ADDR        ,  2b ; port
CONSTANT REG_FRAC_PY_15_8_ADDR       ,  2c ; port
CONSTANT REG_FRAC_PX_7_0_ADDR        ,  2d ; port
CONSTANT REG_FRAC_PX_15_8_ADDR       ,  2e ; port

CONSTANT start_frac_calc             ,  01 
CONSTANT frac_busy                   ,  01 
CONSTANT frac_found                  ,  02
CONSTANT color_red_green      , 00    ; set auto in 
CONSTANT color_blue_bg        , F1    ; set auto in 
CONSTANT frac_fg_high         , 00    
CONSTANT frac_fg_low          , F1    
CONSTANT frac_bg_high         , 00    
CONSTANT frac_bg_low          , 01    

CONSTANT set_auto_inc     , 01    ; set auto in 


CONSTANT delay_1us_const  , 10    ; delay 1 us value

;;============================================================================
;; Other constants.
;;============================================================================

CONSTANT ZERO             , 00    ; zero
CONSTANT ONE              , 01    ; one


;;============================================================================
;; NAMEREG
;;============================================================================

namereg  s7,   result 

namereg  s8,   b0    ; 1st byte 
namereg  s9,   b1    ; 
namereg  sA,   b22    ; 
namereg  sB,   b33    ; 



CONSTANT BYTE_0         , 10  ;
CONSTANT BYTE_1         , 86  ;
CONSTANT BYTE_2         , CB  ;
CONSTANT BYTE_3         , FD  ;

;;============================================================================
;; Fractal calculation constants.
;;===========================================================================

;;============================================================================
;; Start up routine goes here.
;;
;; Register usage convention is:
;; * s0, s1, s2, s3, s4, and s5 are are for general
;;   use in the main program loop.
;; * sF is reserved for the control state variable.
;;============================================================================

;;============================================================================
;; Main program loop; for the most part, this continuously updates the LCD.
;; Everything else is done in the interrupt service routine.
;;============================================================================

         main:
                    CALL     init_iter
         finish:    CALL     delay_20ms
                    LOAD     s0, 03
                    OUTPUT   s0, pt_disp_cs  
                    LOAD     s0, set_auto_inc 
         end_loop:  JUMP    end_loop                    ; 

;;============================================================================
;; Delay routines.  These use s0 through s3 to implement a counter.  The
;; larger the delay, the more registers consumed.
;;============================================================================

       delay_1us: LOAD s0, delay_1us_const
        wait_1us: SUB s0, ONE
                  JUMP NZ, wait_1us
                  RETURN
      delay_40us: LOAD s1, 28                         ; 40 x 1us = 40us
       wait_40us: CALL delay_1us
                  SUB s1, ONE
                  JUMP NZ, wait_40us
                  RETURN
       delay_1ms: LOAD s2, 19                         ; 25 x 40us = 1ms
        wait_1ms: CALL delay_40us
                  SUB s2, ONE
                  JUMP NZ, wait_1ms
                  RETURN
      delay_20ms: LOAD s3, 14                         ; 20 x 1ms = 20ms
       wait_20ms: CALL delay_1ms
                  SUB s3, ONE
                  JUMP NZ, wait_20ms
                  RETURN
      write_to_mem:
                  ; Set btyes for 4 words of data. 

                  CALL     set_frac_fg_bg_color
                  OUTPUT   s0,  reg_ddr2_data0_7_0
                  OUTPUT   s1,  reg_ddr2_data0_15_8
                  CALL     set_frac_fg_bg_color
                  OUTPUT   s0,  reg_ddr2_data0_23_16
                  OUTPUT   s1,  reg_ddr2_data0_31_24
                  CALL     set_frac_fg_bg_color
                  OUTPUT   s0,  reg_ddr2_data1_7_0
                  OUTPUT   s1,  reg_ddr2_data1_15_8
                  CALL     set_frac_fg_bg_color
                  OUTPUT   s0,  reg_ddr2_data1_23_16
                  OUTPUT   s1,  reg_ddr2_data1_31_24

                  ; Set addr 
                  ;-------------------------------------- 
                  ;| py1, py0   |   px1,  px0           | 
                  ;--------------------------------------
                  ;23         10 9                     1

                  ; addr[7:0] = { px0[6:0] , 1'b0 } 
                  FETCH    s0,   PX0_MEM
                  AND      s0,   FC   ;; set 0 to 2LSB to make address 4-words alignment.   
                  SL0      s0,        ;; px0 << 1 
                  OUTPUT   s0,   reg_ddr2_addr_7_0
      
                  ; addr[15:8] = { py0[4:0], px1[2:0] } 
                  FETCH    s1,   PX1_MEM
                  SLA      s1
                  AND      s1,   07
                  FETCH    s2,   PY0_MEM
                  SL0      s2
                  SL0      s2
                  SL0      s2
                  OR       s1,   s2
                  OUTPUT   s1,   reg_ddr2_addr_15_8

                  ; addr[23:16] = { py1[4:0], py0[7:5] } 
                  FETCH    s2,   PY0_MEM
                  SR0      s2, 
                  SR0      s2, 
                  SR0      s2, 
                  SR0      s2, 
                  SR0      s2, 
                  FETCH    s1,   PY1_MEM
                  SL0      s1
                  SL0      s1
                  SL0      s1
                  OR       s1,   s2
                  OUTPUT   s1,   reg_ddr2_addr_23_16

                  ; initial write command 

                  LOAD     s0,  active_ddr2_write
                  OUTPUT   s0,  reg_ddr2_status_ctrl 
                  RETURN

set_frac_fg_bg_color:    ;;  According to fractal result, set color to fg ( front graphic ) or bg ( background graphic ) 
                  SR0      result
                  JUMP     NC,  draw_bg  
                  LOAD     s0,  frac_fg_low
                  LOAD     s1,  frac_fg_high
                  RETURN
      draw_bg:    LOAD     s0,  frac_bg_low
                  LOAD     s1,  frac_bg_high
                  RETURN 
                           
      init_iter:
                 LOAD     s0, ITER_0  ; reg  <- max iteration number   
                 OUTPUT   s0, REG_FRAC_MAX_ITER_LOW_ADDR
                 LOAD     s0, ITER_1 
                 OUTPUT   s0, REG_FRAC_MAX_ITER_HIGH_ADDR
                 RETURN 
      init_cy:
                 LOAD    cy0, CY0_0   ; cy = cy0 
                 LOAD    cy1, CY0_1  
                 LOAD    cy2, CY0_2  
                 LOAD    cy3, CY0_3  
                 RETURN 
   clear_result: ;; result = 0001_0000
                 LOAD      result,  00  
                 SR1       result 
                 SR0       result
                 SR0       result
                 SR0       result
                 RETURN   
   init_py_orig:
                 LOAD      s0, PY0_0
                 STORE     s0, PY0_MEM
                 LOAD      s0, PY0_1
                 STORE     s0, PY1_MEM
                 RETURN
   init_cx_orig:
                 LOAD      cx0, CX0_0   ;       cx = cx0
                 LOAD      cx1, CX0_1 
                 LOAD      cx2, CX0_2 
                 LOAD      cx3, CX0_3 
   init_px_orig:
                 LOAD      s0, PX0_0
                 STORE     s0, PX0_MEM
                 LOAD      s0, PX0_1
                 STORE     s0, PX1_MEM
                 RETURN
   start_calc:
                 OUTPUT    cx0, REG_FRAC_CX_7_0_ADDR     ; reg <- cx  
                 OUTPUT    cx1, REG_FRAC_CX_15_8_ADDR
                 OUTPUT    cx2, REG_FRAC_CX_23_16_ADDR
                 OUTPUT    cx3, REG_FRAC_CX_31_24_ADDR
                 OUTPUT    cy0, REG_FRAC_CY_7_0_ADDR     ; reg <- cy  
                 OUTPUT    cy1, REG_FRAC_CY_15_8_ADDR
                 OUTPUT    cy2, REG_FRAC_CY_23_16_ADDR
                 OUTPUT    cy3, REG_FRAC_CY_31_24_ADDR
                 LOAD      s0,  start_frac_calc          ; start fractal calcualtion 
                 OUTPUT    s0,  REG_FRAC_CTRL_STATUS  
                 RETURN
   inc_cx: 
                 ADD       cx0,  DELTA_0 
                 ADDCY     cx1,  DELTA_1 
                 ADDCY     cx2,  DELTA_2 
                 ADDCY     cx3,  DELTA_3 
                 RETURN   
   inc_cy: 
                 ADD       cy0,  DELTA_0 
                 ADDCY     cy1,  DELTA_1 
                 ADDCY     cy2,  DELTA_2 
                 ADDCY     cy3,  DELTA_3 
                 RETURN   
   inc_px:  
                 FETCH     s0,   PX0_MEM
                 FETCH     s1,   PX1_MEM
                 ADD       s0,   01
                 ADDCY     s1,   00
                 STORE     s0,   PX0_MEM
                 STORE     s1,   PX1_MEM
                 RETURN
   check_px:
                 SUB       s0,   00   ;; px - 0x300 < 0 
                 SUBCY     s1,   03
                 RETURN
   dec_py:  
                 FETCH     s0,   PY0_MEM
                 FETCH     s1,   PY1_MEM
                 SUB       s0,   01
                 SUBCY     s1,   00
                 STORE     s0,   PY0_MEM
                 STORE     s1,   PY1_MEM
                 RETURN
   check_py:
                 RETURN
   set_py_reg:
                 FETCH     s0,   PY0_MEM
                 OUTPUT    s0,   REG_FRAC_PY_7_0_ADDR    
                 FETCH     s1,   PY1_MEM
                 OUTPUT    s1,   REG_FRAC_PY_15_8_ADDR    
                 RETURN
   set_px_reg:
                 FETCH     s0,   PX0_MEM
                 OUTPUT    s0,   REG_FRAC_PX_7_0_ADDR    
                 FETCH     s1,   PX1_MEM
                 OUTPUT    s1,   REG_FRAC_PX_15_8_ADDR    
                 RETURN

