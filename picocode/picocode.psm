;;////////////////////////////////////////////////////////////////////////////////
;; Author: merlionfire 
;; 
;; Create Date:    10/07/2016
;; Design Name: 
;; File Name:      picocode.psm   
;; Project Name:   test_ddr_mgr 
;; Target Devices: 
;; Tool versions:  ISE14.5
;; Description: 
;;
;; Dependencies: 
;;
;; Revision: 
;; Revision 0.01 - File Created



;;============================================================================
;; Ascii table 
;;============================================================================
CONSTANT ascii_CR         , 0D    ; ascii code

CONSTANT ascii_SPACE      , 20    ; ascii code
CONSTANT ascii_EXCLAIM    , 21    ; ascii code
CONSTANT ascii_DBLQUOT    , 22    ; ascii code
CONSTANT ascii_NUMSIGN    , 23    ; ascii code
CONSTANT ascii_DOLLAR     , 24    ; ascii code
CONSTANT ascii_PERCENT    , 25    ; ascii code
CONSTANT ascii_AMP        , 26    ; ascii code
CONSTANT ascii_SINQUOT    , 27    ; ascii code
CONSTANT ascii_LPAREN     , 28    ; ascii code
CONSTANT ascii_RPAREN     , 29    ; ascii code
CONSTANT ascii_ASTERISK   , 2A    ; ascii code
CONSTANT ascii_PLUS       , 2B    ; ascii code
CONSTANT ascii_COMMA      , 2C    ; ascii code
CONSTANT ascii_MINUS      , 2D    ; ascii code
CONSTANT ascii_PERIOD     , 2E    ; ascii code
CONSTANT ascii_FWDSLASH   , 2F    ; ascii code

CONSTANT ascii_0          , 30    ; ascii code
CONSTANT ascii_1          , 31    ; ascii code
CONSTANT ascii_2          , 32    ; ascii code
CONSTANT ascii_3          , 33    ; ascii code
CONSTANT ascii_4          , 34    ; ascii code
CONSTANT ascii_5          , 35    ; ascii code
CONSTANT ascii_6          , 36    ; ascii code
CONSTANT ascii_7          , 37    ; ascii code
CONSTANT ascii_8          , 38    ; ascii code
CONSTANT ascii_9          , 39    ; ascii code
CONSTANT ascii_COLON      , 3A    ; ascii code
CONSTANT ascii_SEMI       , 3B    ; ascii code
CONSTANT ascii_LESS       , 3C    ; ascii code
CONSTANT ascii_EQUAL      , 3D    ; ascii code
CONSTANT ascii_GREATER    , 3E    ; ascii code
CONSTANT ascii_QUESTION   , 3F    ; ascii code

CONSTANT ascii_CIRCAT     , 40    ; ascii code
CONSTANT ascii_A          , 41    ; ascii code
CONSTANT ascii_B          , 42    ; ascii code
CONSTANT ascii_C          , 43    ; ascii code
CONSTANT ascii_D          , 44    ; ascii code
CONSTANT ascii_E          , 45    ; ascii code
CONSTANT ascii_F          , 46    ; ascii code
CONSTANT ascii_G          , 47    ; ascii code
CONSTANT ascii_H          , 48    ; ascii code
CONSTANT ascii_I          , 49    ; ascii code
CONSTANT ascii_J          , 4A    ; ascii code
CONSTANT ascii_K          , 4B    ; ascii code
CONSTANT ascii_L          , 4C    ; ascii code
CONSTANT ascii_M          , 4D    ; ascii code
CONSTANT ascii_N          , 4E    ; ascii code
CONSTANT ascii_O          , 4F    ; ascii code

CONSTANT ascii_P          , 50    ; ascii code
CONSTANT ascii_Q          , 51    ; ascii code
CONSTANT ascii_R          , 52    ; ascii code
CONSTANT ascii_S          , 53    ; ascii code
CONSTANT ascii_T          , 54    ; ascii code
CONSTANT ascii_U          , 55    ; ascii code
CONSTANT ascii_V          , 56    ; ascii code
CONSTANT ascii_W          , 57    ; ascii code
CONSTANT ascii_X          , 58    ; ascii code
CONSTANT ascii_Y          , 59    ; ascii code
CONSTANT ascii_Z          , 5A    ; ascii code
CONSTANT ascii_LBKT       , 5B    ; ascii code
CONSTANT ascii_BKSLASH    , 5C    ; ascii code
CONSTANT ascii_RBKT       , 5D    ; ascii code
CONSTANT ascii_CARET      , 5E    ; ascii code
CONSTANT ascii_DASH       , 5F    ; ascii code

CONSTANT ascii_TICK       , 60    ; ascii code
CONSTANT ascii_a          , 61    ; ascii code
CONSTANT ascii_b          , 62    ; ascii code
CONSTANT ascii_c          , 63    ; ascii code
CONSTANT ascii_d          , 64    ; ascii code
CONSTANT ascii_e          , 65    ; ascii code
CONSTANT ascii_f          , 66    ; ascii code
CONSTANT ascii_g          , 67    ; ascii code
CONSTANT ascii_h          , 68    ; ascii code
CONSTANT ascii_i          , 69    ; ascii code
CONSTANT ascii_j          , 6A    ; ascii code
CONSTANT ascii_k          , 6B    ; ascii code
CONSTANT ascii_l          , 6C    ; ascii code
CONSTANT ascii_m          , 6D    ; ascii code
CONSTANT ascii_n          , 6E    ; ascii code
CONSTANT ascii_o          , 6F    ; ascii code

CONSTANT ascii_p          , 70    ; ascii code
CONSTANT ascii_q          , 71    ; ascii code
CONSTANT ascii_r          , 72    ; ascii code
CONSTANT ascii_s          , 73    ; ascii code
CONSTANT ascii_t          , 74    ; ascii code
CONSTANT ascii_u          , 75    ; ascii code
CONSTANT ascii_v          , 76    ; ascii code
CONSTANT ascii_w          , 77    ; ascii code
CONSTANT ascii_x          , 78    ; ascii code
CONSTANT ascii_y          , 79    ; ascii code
CONSTANT ascii_z          , 7A    ; ascii code

;;============================================================================
;; Ports and related constants.
;;============================================================================

CONSTANT pt_disp_cs       , 00    ; port disp_cs
CONSTANT pt_cw_x_orig     , 01    ; port cw_x_orig
CONSTANT pt_cw_y_orig     , 02    ; port cw_y_orig
CONSTANT pt_cw_x_size     , 03    ; port cw_x_size
CONSTANT pt_cw_y_size     , 04    ; port cw_y_size
CONSTANT pt_cb_addr_orig_l , 05   ; port cb_addr_orig_l 
CONSTANT pt_cb_addr_orig_h , 06   ; port cb_addr_orig_h 
CONSTANT pt_char_rgl      , 07    ; port char_rgl
CONSTANT pt_graph_rgl     , 08    ; port graph_rgl
CONSTANT pt_cw_row        , 09    ; port cw_row
CONSTANT pt_cw_col        , 0a    ; port cw_col
CONSTANT pt_cb_wr_data    , 0b    ; port cb_wr_data

;;---------------- ddr2 mgr registers ----------------------
CONSTANT reg_ddr2_status_ctrl  , 10    ; port 
CONSTANT reg_ddr2_data0_7_0    , 11    ; port 
CONSTANT reg_ddr2_data0_15_8   , 12    ; port 
CONSTANT reg_ddr2_data0_23_16  , 13    ; port 
CONSTANT reg_ddr2_data0_31_24  , 14    ; port 
CONSTANT reg_ddr2_data1_7_0    , 15    ; port 
CONSTANT reg_ddr2_data1_15_8   , 16    ; port 
CONSTANT reg_ddr2_data1_23_16  , 17    ; port 
CONSTANT reg_ddr2_data1_31_24  , 18    ; port 
CONSTANT reg_ddr2_addr_7_0     , 19    ; port 
CONSTANT reg_ddr2_addr_15_8    , 1a    ; port 
CONSTANT reg_ddr2_addr_23_16   , 1b    ; port 

CONSTANT active_ddr2_write     , 01    ; 
CONSTANT BIT_DDR2_BUSY         , 01    ;

CONSTANT pic_fg_red_green      , 00    ;
CONSTANT pic_fg_blue_bg        , F1    ;


;;---------------- frac unit registers ----------------------
CONSTANT REG_FRAC_CTRL_STATUS        ,  20 ; port
CONSTANT REG_FRAC_CX_7_0_ADDR        ,  21 ; port
CONSTANT REG_FRAC_CX_15_8_ADDR       ,  22 ; port
CONSTANT REG_FRAC_CX_23_16_ADDR      ,  23 ; port
CONSTANT REG_FRAC_CX_31_24_ADDR      ,  24 ; port
CONSTANT REG_FRAC_CY_7_0_ADDR        ,  25 ; port
CONSTANT REG_FRAC_CY_15_8_ADDR       ,  26 ; port
CONSTANT REG_FRAC_CY_23_16_ADDR      ,  27 ; port
CONSTANT REG_FRAC_CY_31_24_ADDR      ,  28 ; port
CONSTANT REG_FRAC_MAX_ITER_LOW_ADDR  ,  29 ; port
CONSTANT REG_FRAC_MAX_ITER_HIGH_ADDR ,  2a ; port
CONSTANT REG_FRAC_PY_7_0_ADDR        ,  2b ; port
CONSTANT REG_FRAC_PY_15_8_ADDR       ,  2c ; port
CONSTANT REG_FRAC_PX_7_0_ADDR        ,  2d ; port
CONSTANT REG_FRAC_PX_15_8_ADDR       ,  2e ; port

CONSTANT start_frac_calc             ,  01 
CONSTANT frac_busy                   ,  01 
CONSTANT frac_found                  ,  02
CONSTANT color_red_green      , 00    ; set auto in 
CONSTANT color_blue_bg        , F1    ; set auto in 
CONSTANT frac_fg_high         , 00    
CONSTANT frac_fg_low          , F1    
CONSTANT frac_bg_high         , 00    
CONSTANT frac_bg_low          , 01    

CONSTANT set_auto_inc     , 01    ; set auto in 


CONSTANT delay_1us_const  , 10    ; delay 1 us value

;;============================================================================
;; Other constants.
;;============================================================================

CONSTANT ZERO             , 00    ; zero
CONSTANT ONE              , 01    ; one


;;============================================================================
;; NAMEREG
;;============================================================================

namereg  s7,   result 

namereg  s8,   c0    ;  Column address low byte 
namereg  s9,   c1    ;  Column address high byte

namereg  sA,   r0    ;  Row address low byte 
namereg  sB,   r1    ;  Row address high byte

;;============================================================================
;; Test Parameters  
;;===========================================================================
CONSTANT BYTE_0         , 10  ;
CONSTANT BYTE_1         , 86  ;
CONSTANT BYTE_2         , CB  ;
CONSTANT BYTE_3         , FD  ;

CONSTANT EXTRA_BYTE_0   , EF  ;
CONSTANT EXTRA_BYTE_1   , 7C  ;
CONSTANT EXTRA_BYTE_2   , 36  ;
CONSTANT EXTRA_BYTE_3   , 02  ;

;; CHECK_MAX_COL indicates max column where data are prealod.
;; Hardware will check data read from this area with hardcode. 
;; This area is expected to [0,1023], which corresponds to the width of 1024*768 VGA screen resolution. 
;; Since column address is incremetal by 4, set "1024" as max colum value instead of "1023". But pls note comparison must be taken after colum address is updated ( That is , added by 4 ) 
;; But adddress register is based on byte, then value should be <<1 
;; 1024 << 1 = 0x4_0_0 << 1 = 0x8_0_0   
CONSTANT CHECK_MAX_COL_0  ,  00 ;  
CONSTANT CHECK_MAX_COL_1  ,  08 ; 


;; Extra 8 words are preload following testing data. It will check if more data than expected are read from DDR due to FW or ddr_mgr bug.  
;; (1024 + 8 ) << 1 = (1032) << 1 = 0x4_08 << 1 = 0x8_1_0
CONSTANT PRE_MAX_COL_0    ,  10 ;  
CONSTANT PRE_MAX_COL_1    ,  08 ;  


;; 768 = 0x3_0_0  ; << 1 = 0x6_0_0 
CONSTANT CHECK_MAX_ROW_0  ,  00 ;  
CONSTANT CHECK_MAX_ROW_1  ,  03 ; 
;CONSTANT CHECK_MAX_ROW_1  ,  01 ; 


;; Extra 8 words are preload following testing data. It will check if more data than expected are read from DDR due to FW or ddr_mgr bug.  
;; 768 + 8 = 776 = 0x3_08
CONSTANT PRE_MAX_ROW_0    ,  10 ;  
CONSTANT PRE_MAX_ROW_1    ,  06 ;  

;;============================================================================
;; Start up routine goes here.
;;
;; Register usage convention is:
;; * s0, s1, s2, s3, s4, and s5 are are for general
;;   use in the main program loop.
;; * sF is reserved for the control state variable.
;;============================================================================

      cold_start:   CALL     wait_mem_write_done
;;============================================================================
;; Main program loop; for the most part, this continuously updates the LCD.
;; Everything else is done in the interrupt service routine.
;;============================================================================

         main:      CALL     set_test_data_reg 
                    CALL     clr_col_addr    
                    CALL     clr_row_addr    
          col_loop:
                    CALL     set_addr_reg 
                    CALL     execute_mem_write 
                    CALL     inc_col_addr ; moving it ahead of checking busy  status is to make sure that state machine has been initiated to execute command  
                    CALL     wait_mem_write_done           
                    CALL     compare_col_addr 
                    JUMP     NZ, col_loop ; contiue  
                    CALL     clr_col_addr
                    CALL     inc_row_addr 
                    CALL     compare_row_addr 
                    JUMP     NZ, col_loop ; continue 
         finish:    CALL     delay_1us
                    LOAD     s0, 02
                    OUTPUT   s0, pt_disp_cs  
         end_loop:  JUMP    end_loop                    ; 

;;============================================================================
;; Delay routines.  These use s0 through s3 to implement a counter.  The
;; larger the delay, the more registers consumed.
;;============================================================================

       delay_1us: LOAD s0, delay_1us_const
        wait_1us: SUB s0, ONE
                  JUMP NZ, wait_1us
                  RETURN
      delay_40us: LOAD s1, 28                         ; 40 x 1us = 40us
       wait_40us: CALL delay_1us
                  SUB s1, ONE
                  JUMP NZ, wait_40us
                  RETURN
       delay_1ms: LOAD s2, 19                         ; 25 x 40us = 1ms
        wait_1ms: CALL delay_40us
                  SUB s2, ONE
                  JUMP NZ, wait_1ms
                  RETURN
      delay_20ms: LOAD s3, 14                         ; 20 x 1ms = 20ms
       wait_20ms: CALL delay_1ms
                  SUB s3, ONE
                  JUMP NZ, wait_20ms
                  RETURN

      set_test_data_reg:
                  ; Set btyes for 4 words of data. 
                  LOAD     s0,   BYTE_0
                  OUTPUT   s0,   reg_ddr2_data0_7_0
                  OUTPUT   s0,   reg_ddr2_data1_7_0

                  LOAD     s0,   BYTE_1
                  OUTPUT   s0,   reg_ddr2_data0_15_8
                  OUTPUT   s0,   reg_ddr2_data1_15_8

                  LOAD     s0,   BYTE_2
                  OUTPUT   s0,   reg_ddr2_data0_23_16
                  OUTPUT   s0,   reg_ddr2_data1_23_16

                  LOAD     s0,   BYTE_3
                  OUTPUT   s0,   reg_ddr2_data0_31_24
                  OUTPUT   s0,   reg_ddr2_data1_31_24
                  RETURN

      set_extra_data_reg:
                  ; Set btyes for 4 words of data. 
                  LOAD     s0,   EXTRA_BYTE_0
                  OUTPUT   s0,   reg_ddr2_data0_7_0
                  OUTPUT   s0,   reg_ddr2_data1_7_0

                  LOAD     s0,   EXTRA_BYTE_1
                  OUTPUT   s0,   reg_ddr2_data0_15_8
                  OUTPUT   s0,   reg_ddr2_data1_15_8

                  LOAD     s0,   EXTRA_BYTE_2
                  OUTPUT   s0,   reg_ddr2_data0_23_16
                  OUTPUT   s0,   reg_ddr2_data1_23_16

                  LOAD     s0,   EXTRA_BYTE_3
                  OUTPUT   s0,   reg_ddr2_data0_31_24
                  OUTPUT   s0,   reg_ddr2_data1_31_24
                  RETURN
      

   ;; About column address for MIG                
   ;; 1. Column addr is from 0-1024 words ( word = 2 bytes )                
   ;; 2. One transfer of MIG has :
   ;;      *) 2 burst / transfter ( Default burst size is 2 )  
   ;;      *) 2 words / burst ( double sampling leads to 2 words wihtin one clock 
   ;;      *) 16 bits / word ( 16 bits data width between MIG and DDR ) 

   ;; Conclusionn: 
   ;;    After one transfrer, total 4 words are written out. So "4" is supposed to be added into column address. ( Note Column address is based on "word" rather than byte
   ;; But address register is based on BYTE, one transfter will write 8 bytes. So incremental step is 8.    

   clr_col_addr:
                  LOAD     c0,   ZERO
                  LOAD     c1,   ZERO
                  RETURN
   inc_col_addr:
                  ADD      c0,   08   ;; See above analysis
                  ADDCY    c1,   00
                  RETURN
   clr_row_addr:
                  LOAD     r0,   ZERO
                  LOAD     r1,   ZERO
                  RETURN
   inc_row_addr:
                  ADD      r0,   01   ;; 
                  ADDCY    r1,   00
                  RETURN

                  ;-------------------------------------- 
                  ;| py1, py0   |   px1,  px0           | 
                  ;--------------------------------------
                  ;23         10 9                     1

                  ; addr[23:16] =  {   r1[4:0], r0[7:5]  }
                  ; addr[15:8]   = {   r0[4:0], c1[2:0] } 
                  ; addr[7:0]    =     c0[7:0]
   set_addr_reg:
                  OUTPUT   c0,   reg_ddr2_addr_7_0
                  ; C1[2:0]  => S0
                  LOAD     s0,   c1 
                  AND      s0,   07
                  ; RO << 3 = { R0[4:0], 3'b000 } 
                  LOAD     s1,   r0
                  SL0      s1
                  SL0      s1
                  SL0      s1
                  ; { R0[4:0],C1[2:0] } => S0
                  OR       s0,   s1
                  OUTPUT   s0,   reg_ddr2_addr_15_8
                  ;  R0[7:5]  => S0
                  LOAD     s0,   r0
                  SR0      s0
                  SR0      s0
                  SR0      s0
                  SR0      s0
                  SR0      s0
                  LOAD     s1,   r1
                  SL0      s1
                  SL0      s1
                  SL0      s1
                  OR       s0,   s1
                  OUTPUT   s0,   reg_ddr2_addr_23_16
                  RETURN


   execute_mem_write:
                  LOAD     s0,  active_ddr2_write
                  OUTPUT   s0,  reg_ddr2_status_ctrl 
                  RETURN

   wait_mem_write_done:
                  INPUT    s0,  reg_ddr2_status_ctrl
                  TEST     s0,  BIT_DDR2_BUSY 
                  JUMP     NZ,  wait_mem_write_done
                  RETURN

   compare_col_addr:
                  COMPARE  c0,  CHECK_MAX_COL_0  
                  RETURN   NZ 
                  COMPARE  c1,  CHECK_MAX_COL_1  
                  RETURN 

   compare_row_addr:
                  COMPARE  r0,  CHECK_MAX_ROW_0  
                  RETURN   NZ 
                  COMPARE  r1,  CHECK_MAX_ROW_1  
                  RETURN 
